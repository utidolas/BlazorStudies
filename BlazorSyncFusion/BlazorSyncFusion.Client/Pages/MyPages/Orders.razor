@page "/Data/Orders"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using BlazorSyncFusion.Client.Models

@inject IOrdersData _db

<h1>Pagina de ordens</h1>

<h4>Inserir nova ordem</h4>
<EditForm Model="@newOrder" OnValidSubmit="@InsertOrder">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<InputText id="customerName" @bind-Value="newOrder.CustomerName" />
	<InputText id="shipVillage" @bind-Value="newOrder.ShipVillage" />
	<InputNumber id="ryoCurrency" @bind-Value="newOrder.RyoCurrency" />

	<button type="submit" class="btn btn-primary">Inserir</button>
</EditForm>

<h4>Ordens atuais</h4>

@if(orders is null)
{
	<p><em>Carregando...</em></p>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Nome</th>
				<th>Local de envio</th>
				<th>Custo</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var order in orders)
			{
				<tr>
					<td>@order.CustomerName</td>
					<td>@order.ShipVillage</td>
					<td>@order.RyoCurrency</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<OrderModel> orders;
	private DisplayOrderModel newOrder = new DisplayOrderModel();

	protected override async Task OnInitializedAsync()
	{
		orders = await _db.GetPeople();
	}

	private async Task InsertOrder()
	{
		// manual mapping to convert DisplayOrderModel to OrderModel
		OrderModel mappedOrder = new OrderModel
			{
				CustomerName = newOrder.CustomerName,
				ShipVillage = newOrder.ShipVillage,
				RyoCurrency = newOrder.RyoCurrency 
			};

		await _db.InsertPerson(mappedOrder);

		orders.Add(mappedOrder);

		newOrder = new DisplayOrderModel(); // reset the form
	}
}
